/*
 * GtmTomPwmHl.c
 *
 *  Created on: 2024. 6. 28.
 *      Author: user
 */


#include "GtmTomPwmHl.h"
#include "ConfigurationIsr.h"

App_GtmTomPwmHl g_GtmTomPwmHl;
uint32 PWMCnt;


IFX_INTERRUPT(ISR_Timer, 0, ISR_PRIORITY_TIMER);
void ISR_Timer(void)
{
    IfxCpu_enableInterrupts();
    IfxGtm_Tom_Timer_acknowledgeTimerIrq(&g_GtmTomPwmHl.drivers.timer);
    g_GtmTomPwmHl.isrCounter.counter++;
}

void GtmTomPwmHl_initTimer(void)
{
    {
        IfxGtm_Tom_Timer_Config timerConfig;
        IfxGtm_Tom_PwmHl_Config pwmHlConfig;
        IfxGtm_Tom_Timer_initConfig(&timerConfig, &MODULE_GTM);
        IfxGtm_Tom_PwmHl_initConfig(&pwmHlConfig);

        timerConfig.base.frequency                  = 2000; //2kHz
        timerConfig.base.isrPriority                = ISR_PRIOTITY(INTERRUPT_TIMER);
        timerConfig.base.isrProvider                = ISR_PROVIDER(INTERRUPT_TIMER);
        timerConfig.base.minResolution              = (1.0 / timerConfig.base.frequency) / 1000;
        timerConfig.base.trigger.enabled            = FALSE;
        timerConfig.clock                           = IfxGtm_Tom_Ch_ClkSrc_cmuFxclk0;
        timerConfig.base.countDir                   = IfxStdIf_Timer_CountDir_upAndDown;

        timerConfig.tom                             = IfxGtm_Tom_0;
        timerConfig.timerChannel                    = IfxGtm_Tom_Ch_0;
        timerConfig.triggerOut                      = &IfxGtm_TOM0_0_TOUT77_P15_6_OUT;

        timerConfig.base.trigger.outputEnabled      = TRUE;
        timerConfig.base.trigger.enabled            = TRUE;
        timerConfig.base.trigger.triggerPoint       = 500;
        timerConfig.base.trigger.risingEdgeAtPeriod = TRUE;

        IfxGtm_Tom_Timer_init(&g_GtmTomPwmHl.drivers.timer, &timerConfig);

        IfxGtm_Tom_ToutMapP ccx[2], coutx[2];
        coutx[0] = &IfxGtm_TOM0_3_TOUT105_P10_3_OUT;
        ccx[0]   = &IfxGtm_TOM0_4_TOUT22_P33_0_OUT;
        coutx[1] = &IfxGtm_TOM0_2_TOUT107_P10_5_OUT;
        ccx[1]   = &IfxGtm_TOM0_5_TOUT23_P33_1_OUT;

        pwmHlConfig.timer                   = &g_GtmTomPwmHl.drivers.timer;
        pwmHlConfig.tom                     = timerConfig.tom;
        pwmHlConfig.base.deadtime           = 2e-6;
        pwmHlConfig.base.minPulse           = 1e-6;
        pwmHlConfig.base.channelCount       = 2;
        pwmHlConfig.base.emergencyEnabled   = FALSE;
        pwmHlConfig.base.outputMode         = IfxPort_OutputMode_none;
        pwmHlConfig.base.outputDriver       = IfxPort_PadDriver_cmosAutomotiveSpeed1;
        pwmHlConfig.base.ccxActiveState     = Ifx_ActiveState_high;
        pwmHlConfig.base.coutxActiveState   = Ifx_ActiveState_high;
        pwmHlConfig.ccx                     = ccx;
        pwmHlConfig.coutx                  = coutx;

        IfxGtm_Tom_PwmHl_init(&g_GtmTomPwmHl.drivers.pwm, &pwmHlConfig);

        IfxGtm_Tom_Timer_run(&g_GtmTomPwmHl.drivers.timer);
    }
}

void GtmTomPwmHl_init(void)
{
    boolean interruptState = IfxCpu_disableInterrupts();

    Ifx_GTM *gtm = &MODULE_GTM;
    g_GtmTomPwmHl.info.gtmFreq = IfxGtm_Cmu_getModuleFrequency(gtm);
    IfxGtm_enable(gtm);
}

